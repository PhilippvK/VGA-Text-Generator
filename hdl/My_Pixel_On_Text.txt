----------------
-- DISCLAIMER --
----------------
-- This is a modified version of a Pixel_On_Text module I found on GitHub:
-- https://github.com/Derek-X-Wang/VGA-Text-Generator/tree/master/VGA-Text-Generator.srcs/sources_1/new
-- Please be aware of the fact, that not 100% of the code is written by me but I tried to annotate every change in the source.

-------------
-- CHANGES --
-------------
-- * Swapped some integers with std_logic_vectors (TODO: return to integers)
-- * delay index by one pixel to compensate memory access latexy
-- * split coordinate tuple into 2 signals for allowing non-constant positions
-- * Added possibility to draw vertical text
-- * Added some new Generics

-- Pixel_On_Text determines if the current pixel is on text
-- param:
--   textlength, use to init the string
-- input:
--   VGA clock(the clk you used to update VGA)
--   display text
--   top left corner of the text box
--   current X and Y position
-- output:
--   a bit that represent whether is the pixel in text

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;


-- note this line.The package is compiled to this directory by default.
-- so don't forget to include this directory.
library work;
-- this line also is must.This includes the particular package into your program.
use work.commonPak.all;

entity My_Pixel_On_Text is
	generic(
	  -- needed for init displayText, the default value 11 is just a random number
          textLength : integer := 11;
	  vertically : std_logic := '0';
	  MAX_X : integer := 640;
	  MAX_Y : integer := 480
	);
	port (
		clk: in std_logic;
		reset: in std_logic;
		displayText: in string (1 to textLength) := (others => NUL);
		-- top left corner of the text
		positionX: in integer;
		positionY: in integer;
		-- current pixel postion
		horzCoord2: in STD_LOGIC_VECTOR(9 DOWNTO 0); -- TODO: make integer range?
		vertCoord2: in STD_LOGIC_VECTOR(9 DOWNTO 0); -- TODO: make integer range?
		-- ?
		pixel: out std_logic := '0'
	);

end My_Pixel_On_Text;

architecture Behavioral of My_Pixel_On_Text is

  signal horzCoord,vertCoord : integer; -- range 0 to MAX_X?/MAX_Y

	signal fontAddress: integer range 0 to 2047;
	-- A row of bit in a character, we check if our current (x,y) is 1 in char row
	signal charBitInRow : std_logic_vector(FONT_WIDTH-1 downto 0) := (others => '0');
	-- char in ASCII code
	signal charCode : integer range 0 to 268435456-1 := 0;
	-- the position(column) of a character in the given text
	signal charPosition : integer := 1;
	-- the bit position(column) in a character
	signal bitPosition : integer range 0 to 7 := 0;
	signal bitPosition_delayed : integer range 0 to 7 := 0;
begin

    horzCoord <= 	; -- TODO: nogo!
    vertCoord <= to_integer(unsigned(vertCoord2));

    p0: PROCESS(horzCoord, positionX)
	VARIABLE tmp : integer := 0
    BEGIN
	IF vertically = '0' BEGIN -- horizontally
		charPosition <= 1;
		tmp := (horzCoord - positionX)/FONT_WIDTH + 1;
		IF tmp > 0 AND tmp <= textLength THEN
			charPosition <= tmp;
		END IF;

		bitPosition <= (horzCoord - positionX) mod FONT_WIDTH;

		fontAddress <= 1;
		tmp := charCode*16+(vertCoord - positionY);
		IF tmp > 0 THEN
			fontAddress <= tmp;
		END IF;
	ELSE -- vertically
		charPosition <= 1;
		tmp := (vertCoord - position.y)/FONT_HEIGHT + 1;
		IF tmp > 0 AND tmp <= textLength THEN
			charPosition <= tmp;
		END IF;

		bitPosition <= (horzCoord - position.x);

		fontAddress <= 1;
		tmp := charCode*16+((vertCoord - position.y) mod FONT_HEIGHT);
		IF tmp > 0 THEN
			fontAddress <= tmp;
		END IF;
	END IF;
    END PROCESS;

    charCode <= character'pos(displayText(charPosition));

	fontRom: entity work.Font_Rom
	port map(
		clk => clk,
    reset => reset,
		addr => fontAddress,
		fontRow => charBitInRow
	);

  position_reg: process(clk)
  begin
    if rising_edge(clk) then
      IF bitPosition >= 0 and bitPosition <= 7 THEN
        bitPosition_delayed <= bitPosition;
      ELSE
        bitPosition_delayed <= 0;
      END IF;
    end if;
  end process;

	pixelOn: process(clk)
		variable inXRange: boolean := false;
		variable inYRange: boolean := false;
	begin
        if rising_edge(clk) then

            -- reset
            inXRange := false;
            inYRange := false;
            pixel <= '0';
	    IF vertically = '0' THEN -- horizontally
            -- If current pixel is in the horizontal range of text
            if horzCoord >= positionX and horzCoord < positionX + (FONT_WIDTH * textlength) then
                inXRange := true;
            end if;

            -- If current pixel is in the vertical range of text
            if vertCoord >= positionY and vertCoord < positionY + FONT_HEIGHT then
                inYRange := true;
            end if;

            -- need to check if the pixel is on for text
            if inXRange and inYRange then
                -- FONT_WIDTH-bitPosition: we are reverting the charactor
                if charBitInRow(FONT_WIDTH-bitPosition_delayed-1) = '1' then
                    pixel <= '1';
                end if;
            end if;
	    ELSE -- vertically
-- If current pixel is in the horizontal range of text
            if vertCoord >= position.y and vertCoord < position.y + (FONT_HEIGHT * textlength) then
                inYRange := true;
            end if;

            -- If current pixel is in the vertical range of text
            if horzCoord >= position.x and horzCoord < position.x + FONT_WIDTH then
                inXRange := true;
            end if;

            -- need to check if the pixel is on for text
            if inXRange and inYRange then
                -- FONT_WIDTH-bitPosition: we are reverting the charactor
                if charBitInRow(FONT_WIDTH-bitPosition_delayed-1) = '1' then
                    pixel <= '1';
                end if;
            end if;

	    END IF;

		end if;
	end process;

end Behavioral;